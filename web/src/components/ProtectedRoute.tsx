import React from 'react';
import UserService from '../services/UserService';
import { User } from '../types/User';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: string;
  fallback?: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredRole, 
  fallback 
}) => {
  const isAuthenticated = UserService.isAuthenticated();
  const currentUser: User | null = UserService.getCurrentUser();

  // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!isAuthenticated || !currentUser) {
    return (
      <div className="access-denied">
        <h3>üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h3>
        <p>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.</p>
        {fallback}
      </div>
    );
  }

  // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å
  if (requiredRole && currentUser.role !== requiredRole) {
    return (
      <div className="access-denied">
        <h3>üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</h3>
        <p>
          –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: <strong>{requiredRole}</strong><br/>
          –í–∞—à–∞ —Ä–æ–ª—å: <strong>{currentUser.role}</strong>
        </p>
        {fallback}
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
  return <>{children}</>;
};

export default ProtectedRoute; 