import React, { useState, useEffect } from 'react';
import './App.css';
import UserService from './services/UserService';
import AuthForms from './components/AuthForms';
import UserProfile from './components/UserProfile';
import ProtectedRoute from './components/ProtectedRoute';
import { User, CreateUserRequest, ApiError } from './types/User';

interface AppState {
  users: User[];
  loading: boolean;
  error: string;
  newUser: CreateUserRequest;
  currentUser: User | null;
  isAuthenticated: boolean;
}

const App: React.FC = () => {
  const [state, setState] = useState<AppState>({
    users: [],
    loading: false,
    error: '',
    newUser: { name: '', email: '', password: '', role: 'user' },
    currentUser: null,
    isAuthenticated: false,
  });

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const isAuth = UserService.isAuthenticated();
    const user = UserService.getCurrentUser();
    
    setState(prev => ({
      ...prev,
      isAuthenticated: isAuth,
      currentUser: user,
    }));

    if (isAuth) {
      loadUsers();
    }
  }, []);

  const loadUsers = async (): Promise<void> => {
    setState(prev => ({ ...prev, loading: true }));
    try {
      const response = await UserService.listUsers();
      setState(prev => ({
        ...prev,
        users: response.users || [],
        error: '',
      }));
    } catch (err) {
      const apiError = err as ApiError;
      setState(prev => ({
        ...prev,
        error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + apiError.message,
      }));
    } finally {
      setState(prev => ({ ...prev, loading: false }));
    }
  };

  const handleAuthSuccess = (): void => {
    const user = UserService.getCurrentUser();
    setState(prev => ({
      ...prev,
      isAuthenticated: true,
      currentUser: user,
      error: '',
    }));
    loadUsers();
  };

  const handleLogout = (): void => {
    setState(prev => ({
      ...prev,
      isAuthenticated: false,
      currentUser: null,
      users: [],
      error: '',
    }));
  };

  const handleCreateUser = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {
    e.preventDefault();
    if (!state.newUser.name || !state.newUser.email || !state.newUser.password) {
      setState(prev => ({ ...prev, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' }));
      return;
    }

    setState(prev => ({ ...prev, loading: true }));
    try {
      await UserService.createUser(
        state.newUser.name, 
        state.newUser.email, 
        state.newUser.password,
        state.newUser.role
      );
      setState(prev => ({
        ...prev,
        newUser: { name: '', email: '', password: '', role: 'user' },
        error: '',
      }));
      await loadUsers();
    } catch (err) {
      const apiError = err as ApiError;
      setState(prev => ({
        ...prev,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + apiError.message,
      }));
    } finally {
      setState(prev => ({ ...prev, loading: false }));
    }
  };

  const handleGetUser = async (id: number): Promise<void> => {
    setState(prev => ({ ...prev, loading: true }));
    try {
      const response = await UserService.getUser(id);
      alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.user?.name} (${response.user?.email})`);
      setState(prev => ({ ...prev, error: '' }));
    } catch (err) {
      const apiError = err as ApiError;
      setState(prev => ({
        ...prev,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + apiError.message,
      }));
    } finally {
      setState(prev => ({ ...prev, loading: false }));
    }
  };

  const handleInputChange = (field: keyof CreateUserRequest) => 
    (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {
      setState(prev => ({
        ...prev,
        newUser: { ...prev.newUser, [field]: e.target.value }
      }));
    };

  const formatDate = (timestamp: number): string => {
    return new Date(timestamp * 1000).toLocaleString('ru-RU');
  };

  // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  if (!state.isAuthenticated) {
    return (
      <div className="App">
        <header className="App-header">
          <h1>üöÄ K8s Go gRPC React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h1>
          <p>–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π</p>
        </header>
        <AuthForms onAuthSuccess={handleAuthSuccess} />
      </div>
    );
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  return (
    <div className="App">
      <header className="App-header">
        <h1>üöÄ K8s Go gRPC React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h1>
        <p>–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º</p>
        {state.currentUser && (
          <UserProfile user={state.currentUser} onLogout={handleLogout} />
        )}
      </header>

      <main className="main-content">
        {state.error && <div className="error">{state.error}</div>}

        {/* –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ */}
        <ProtectedRoute 
          requiredRole="admin"
          fallback={
            <div className="info-message">
              <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              <p>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.</p>
            </div>
          }
        >
          <section className="create-user">
            <h2>–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê–¥–º–∏–Ω)</h2>
            <form onSubmit={handleCreateUser}>
              <div className="form-group">
                <input
                  type="text"
                  placeholder="–ò–º—è"
                  value={state.newUser.name}
                  onChange={handleInputChange('name')}
                  disabled={state.loading}
                />
              </div>
              <div className="form-group">
                <input
                  type="email"
                  placeholder="Email"
                  value={state.newUser.email}
                  onChange={handleInputChange('email')}
                  disabled={state.loading}
                />
              </div>
              <div className="form-group">
                <input
                  type="password"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  value={state.newUser.password}
                  onChange={handleInputChange('password')}
                  disabled={state.loading}
                />
              </div>
              <div className="form-group">
                <select
                  value={state.newUser.role}
                  onChange={handleInputChange('role')}
                  disabled={state.loading}
                >
                  <option value="user">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                  <option value="moderator">üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
                  <option value="admin">üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
              </div>
              <button type="submit" disabled={state.loading}>
                {state.loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
              </button>
            </form>
          </section>
        </ProtectedRoute>

        <section className="users-list">
          <h2>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
          <button onClick={loadUsers} disabled={state.loading} className="refresh-btn">
            {state.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'}
          </button>
          
          {state.users.length === 0 && !state.loading ? (
            <p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
          ) : (
            <div className="users-grid">
              {state.users.map((user: User) => (
                <div key={user.id} className="user-card">
                  <div className="user-card-header">
                    <span className="user-role-badge" data-role={user.role}>
                      {user.role === 'admin' ? 'üëë' : 'üë§'} {user.role}
                    </span>
                    <span className={`user-status ${user.is_active ? 'active' : 'inactive'}`}>
                      {user.is_active ? '‚úÖ' : '‚ùå'}
                    </span>
                  </div>
                  <h3>{user.name}</h3>
                  <p>{user.email}</p>
                  <p>ID: {user.id}</p>
                  <p>–°–æ–∑–¥–∞–Ω: {formatDate(user.created_at)}</p>
                  <button 
                    onClick={() => handleGetUser(user.id)}
                    disabled={state.loading}
                    className="get-user-btn"
                  >
                    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏
                  </button>
                </div>
              ))}
            </div>
          )}
        </section>

        <section className="monitoring-links">
          <h2>üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h2>
          <div className="links-grid">
            <a href="http://localhost:3001" target="_blank" rel="noopener noreferrer" className="monitoring-link">
              üìä Grafana
            </a>
            <a href="http://localhost:9091" target="_blank" rel="noopener noreferrer" className="monitoring-link">
              üîç Prometheus
            </a>
            <a href="http://localhost:9000" target="_blank" rel="noopener noreferrer" className="monitoring-link">
              üìù Graylog
            </a>
            <a href="http://localhost:8081/health" target="_blank" rel="noopener noreferrer" className="monitoring-link">
              ‚ù§Ô∏è Health Check
            </a>
          </div>
        </section>
      </main>
    </div>
  );
};

export default App; 