name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run Go linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install web dependencies
      working-directory: ./web
      run: npm ci

    - name: Check TypeScript types
      working-directory: ./web
      run: npm run type-check

    - name: Run ESLint
      working-directory: ./web
      run: npm run lint

    - name: Check Prettier formatting
      working-directory: ./web
      run: npm run format:check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run Go unit tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: testuser
        DB_PASSWORD: testpass
        DB_NAME: testdb
        DB_SSLMODE: disable
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload Go coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: backend

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install web dependencies
      working-directory: ./web
      run: npm ci

    - name: Run web unit tests
      working-directory: ./web
      run: npm test -- --coverage --watchAll=false --ci

    - name: Upload web coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./web/coverage
        flags: frontend

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build gRPC Server (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.server
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build HTTP Gateway (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.gateway
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Web App (no push)
      uses: docker/build-push-action@v5
      with:
        context: ./web
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max 